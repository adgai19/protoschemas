// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/createOrder.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/adgai19/microservices/gen/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrderName is the fully-qualified name of the Order service.
	OrderName = "Order"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrderCreateOrderProcedure is the fully-qualified name of the Order's CreateOrder RPC.
	OrderCreateOrderProcedure = "/Order/CreateOrder"
)

// OrderClient is a client for the Order service.
type OrderClient interface {
	CreateOrder(context.Context, *connect_go.Request[v1.CreateOrderRequest]) (*connect_go.Response[v1.CreateOrderResponse], error)
}

// NewOrderClient constructs a client for the Order service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrderClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrderClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orderClient{
		createOrder: connect_go.NewClient[v1.CreateOrderRequest, v1.CreateOrderResponse](
			httpClient,
			baseURL+OrderCreateOrderProcedure,
			opts...,
		),
	}
}

// orderClient implements OrderClient.
type orderClient struct {
	createOrder *connect_go.Client[v1.CreateOrderRequest, v1.CreateOrderResponse]
}

// CreateOrder calls Order.CreateOrder.
func (c *orderClient) CreateOrder(ctx context.Context, req *connect_go.Request[v1.CreateOrderRequest]) (*connect_go.Response[v1.CreateOrderResponse], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// OrderHandler is an implementation of the Order service.
type OrderHandler interface {
	CreateOrder(context.Context, *connect_go.Request[v1.CreateOrderRequest]) (*connect_go.Response[v1.CreateOrderResponse], error)
}

// NewOrderHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrderHandler(svc OrderHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(OrderCreateOrderProcedure, connect_go.NewUnaryHandler(
		OrderCreateOrderProcedure,
		svc.CreateOrder,
		opts...,
	))
	return "/.Order/", mux
}

// UnimplementedOrderHandler returns CodeUnimplemented from all methods.
type UnimplementedOrderHandler struct{}

func (UnimplementedOrderHandler) CreateOrder(context.Context, *connect_go.Request[v1.CreateOrderRequest]) (*connect_go.Response[v1.CreateOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("Order.CreateOrder is not implemented"))
}
